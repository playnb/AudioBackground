{
  "ver": "1.0.22",
  "uuid": "dfdf162e-2bd2-4d4d-b69e-9455967c352c",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\n  precision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\n  varying vec4 v_color;\n\n  #if USE_TEXTURE\n  varying vec2 v_uv0;\n  uniform sampler2D texture;\n  #endif\n\n  uniform vec4 uResolution;\nuniform float uTime;\nuniform sampler2D uChannel0;\nfloat hash(int x) { return fract(sin(float(x))*7.847); } \n\nfloat dSegment(vec2 a, vec2 b, vec2 c)\n{\n    vec2 ab = b-a;\n    vec2 ac = c-a;\n\n    float h = clamp(dot(ab, ac)/dot(ab, ab), 0., 1.);\n    vec2 point = a+ab*h;\n    return length(c-point);\n}\n\nvec3 drawLine(vec3 color, vec2 uv, float wave, int i){\n  vec2 a = vec2(hash(i)*2.-1., hash(i+1)*2.-1.);\n   vec2 b = vec2(hash(10*i+1)*2.-1., hash(11*i+2)*2.-1.);\n   vec3 lineColor = vec3(hash(10+i), hash(18+i*3), hash(5+i*10));\n   float speed = b.y*0.15;\n   float size = (0.005 + 0.3*hash(5+i*i*2)) + (0.5+0.5*sin(a.y*5.+0.0*speed))*0.1;\n        \n   a += vec2(sin(a.x*20.+uTime*speed), sin(a.y*15.+uTime*0.4*speed)*0.5);\n   b += vec2(b.x*5.+cos(uTime*speed), cos(b.y*10.+uTime*2.0*speed)*0.5);\n   float dist = dSegment(a, b, uv);\n        \n   float soundWave = 1.5*wave;\n   color += mix(lineColor, vec3(0.), smoothstep(0., 1.0, pow(dist/size, soundWave*(0.5+0.5)*0.20) ));\n  return color;\n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n  vec2 uv = (fragCoord.xy*2.-uResolution.xy) / uResolution.yy;\n    \n    vec3 color = vec3(0.);\n    color = mix(vec3(0.325, 0.431, 0.364), color, abs(uv.x)*0.25);\n    \n    for(int i=0; i < 10; ++i)    {\n        color = drawLine(color, uv, texture2D(uChannel0, vec2(float(i)/float(10), 0.0)).x, i);\n    }\n    \n  fragColor = vec4(color,1.0);\n}\n\n  void main () {\n    mainImage(gl_FragColor, v_uv0.xy*uResolution.xy);\n\n  }\n\n"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\n  precision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  }\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\n  in vec4 v_color;\n\n  #if USE_TEXTURE\n  in vec2 v_uv0;\n  uniform sampler2D texture;\n  #endif\n\n  uniform LTP {\n    vec4 uResolution;\n    vec4 uMouse;\n    float uTime;\n    sampler2D uChannel0;\n    sampler2D uChannel1;\n    sampler2D uChannel2;\n    sampler2D uChannel3;\n  }\n\nfloat hash(int x) { return fract(sin(float(x))*7.847); } \n\nfloat dSegment(vec2 a, vec2 b, vec2 c)\n{\n    vec2 ab = b-a;\n    vec2 ac = c-a;\n\n    float h = clamp(dot(ab, ac)/dot(ab, ab), 0., 1.);\n    vec2 point = a+ab*h;\n    return length(c-point);\n}\n\nvec3 drawLine(vec3 color, vec2 uv, float wave, int i){\n  vec2 a = vec2(hash(i)*2.-1., hash(i+1)*2.-1.);\n   vec2 b = vec2(hash(10*i+1)*2.-1., hash(11*i+2)*2.-1.);\n   vec3 lineColor = vec3(hash(10+i), hash(18+i*3), hash(5+i*10));\n   float speed = b.y*0.15;\n   float size = (0.005 + 0.3*hash(5+i*i*2)) + (0.5+0.5*sin(a.y*5.+0.0*speed))*0.1;\n        \n   a += vec2(sin(a.x*20.+uTime*speed), sin(a.y*15.+uTime*0.4*speed)*0.5);\n   b += vec2(b.x*5.+cos(uTime*speed), cos(b.y*10.+uTime*2.0*speed)*0.5);\n   float dist = dSegment(a, b, uv);\n        \n   float soundWave = 1.5*wave;\n   color += mix(lineColor, vec3(0.), smoothstep(0., 1.0, pow(dist/size, soundWave*(0.5+0.5)*0.20) ));\n  return color;\n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n  vec2 uv = (fragCoord.xy*2.-uResolution.xy) / uResolution.yy;\n    \n    vec3 color = vec3(0.);\n    color = mix(vec3(0.325, 0.431, 0.364), color, abs(uv.x)*0.25);\n    \n    for(int i=0; i < 10; ++i)    {\n        color = drawLine(color, uv, texture(uChannel0, vec2(float(i)/float(10), 0.0)).x, i);\n    }\n    \n  fragColor = vec4(color,1.0);\n}\n\n  void main () {\n    mainImage(gl_FragColor, v_uv0.xy*uResolution.xy);\n\n  }\n\n"
      }
    }
  ],
  "subMetas": {}
}