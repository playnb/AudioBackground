{
  "ver": "1.0.22",
  "uuid": "82be4402-3c68-4571-9dc8-12552c1df046",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\n  precision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\n  varying vec4 v_color;\n\n  #if USE_TEXTURE\n  varying vec2 v_uv0;\n  uniform sampler2D texture;\n  #endif\n\n  uniform vec4 uResolution;\nuniform float uTime;\nuniform sampler2D uChannel0;\nfloat _round(float f){\n    return floor(step(0.5001, fract(f))+f);\n}\n\nvec2 _round(vec2 f){\n    return vec2(_round(f.x),_round(f.y));\n}\n\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\nconst float gridWidth = 0.43;\nconst vec3 bgColor = vec3(0.01, 0.116, 0.12);\n\nvec3 hue( float c )\n{\n    return smoothstep(0.,1., abs(mod(c*6.+vec3(0,4,2), 3.)-0.31)-1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2. * fragCoord - uResolution.xy) / uResolution.y;\n    float threshold = .03;\n    vec2 node = uv / gridWidth;\n\n    node = _round(node) * gridWidth;\n    \n    vec4 wav = texture2D(uChannel0, vec2(0.1, 0.0));\n     \n    float sizeNum = 1.5*wav.x;\n\n    vec2 to = uv - node;\n    to /= abs(sizeNum) + .4;\n    to *= rot((uTime * 15.) * .15);\n    float d = length(max(abs(to) - .050, 0.));\n    \n    vec3 col = .1 + .5 * hue(sizeNum / 6.);\n    \n    float val = smoothstep(threshold + .01, threshold, d);\n    fragColor.rgb = mix( bgColor, col, val);\n    fragColor.a=0.5;\n}\n\n  void main () {\n    mainImage(gl_FragColor, v_uv0.xy*uResolution.xy);\n\n  }\n\n"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\n  precision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  }\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\n  in vec4 v_color;\n\n  #if USE_TEXTURE\n  in vec2 v_uv0;\n  uniform sampler2D texture;\n  #endif\n\n  uniform LTP {\n    vec4 uResolution;\n    vec4 uMouse;\n    float uTime;\n    sampler2D uChannel0;\n    sampler2D uChannel1;\n    sampler2D uChannel2;\n    sampler2D uChannel3;\n  }\n\nfloat _round(float f){\n    return floor(step(0.5001, fract(f))+f);\n}\n\nvec2 _round(vec2 f){\n    return vec2(_round(f.x),_round(f.y));\n}\n\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\nconst float gridWidth = 0.43;\nconst vec3 bgColor = vec3(0.01, 0.116, 0.12);\n\nvec3 hue( float c )\n{\n    return smoothstep(0.,1., abs(mod(c*6.+vec3(0,4,2), 3.)-0.31)-1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2. * fragCoord - uResolution.xy) / uResolution.y;\n    float threshold = .03;\n    vec2 node = uv / gridWidth;\n\n    node = _round(node) * gridWidth;\n    \n    vec4 wav = texture(uChannel0, vec2(0.1, 0.0));\n     \n    float sizeNum = 1.5*wav.x;\n\n    vec2 to = uv - node;\n    to /= abs(sizeNum) + .4;\n    to *= rot((uTime * 15.) * .15);\n    float d = length(max(abs(to) - .050, 0.));\n    \n    vec3 col = .1 + .5 * hue(sizeNum / 6.);\n    \n    float val = smoothstep(threshold + .01, threshold, d);\n    fragColor.rgb = mix( bgColor, col, val);\n    fragColor.a=0.5;\n}\n\n  void main () {\n    mainImage(gl_FragColor, v_uv0.xy*uResolution.xy);\n\n  }\n\n"
      }
    }
  ],
  "subMetas": {}
}